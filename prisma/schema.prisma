// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    profile       Profile?

    accounts Account[]
    sessions Session[]
    images   Image[]

    eventsOwned     Event[] @relation("Owner")
    eventsAttending Event[]

    connectionsInviteSent     Invite[] @relation("InvitesSent")
    connectionsInviteReceived Invite[] @relation("InvitesRecieved")

    connectionsRequested Connection[] @relation("ConnectionTo")
    connectionsAccepted  Connection[] @relation("ConnectionFrom")

    messagesSent     Message[] @relation("MessageSender")
    messagesRecieved Message[] @relation("MessageReciever")
}

model Connection {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())

    fromUserId String
    fromUser   User   @relation("ConnectionFrom", fields: [fromUserId], references: [id], onDelete: Cascade)

    toUserId String
    toUser   User   @relation("ConnectionTo", fields: [toUserId], references: [id], onDelete: Cascade)

    messages Message[]

    chatId String
}

model Invite {
    id        String       @id @default(cuid())
    createdAt DateTime     @default(now())
    status    InviteStatus @default(PENDING)

    location   Location? @relation(fields: [locationId], references: [id])
    locationId String?

    fromUserId String
    fromUser   User   @relation("InvitesSent", fields: [fromUserId], references: [id], onDelete: Cascade)

    toUserId String
    toUser   User   @relation("InvitesRecieved", fields: [toUserId], references: [id], onDelete: Cascade)
}

model Profile {
    id          String  @id @default(cuid())
    firstName   String?
    lastName    String?
    bio         String?
    linkedinUrl String?
    githubUrl   String?
    twitterUrl  String?
    facebookUrl String?

    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
    id        String    @id @default(cuid())
    imageUrl  String
    caption   String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    role      ImageRole

    ownerId String
    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

    eventId String?
    event   Event?  @relation(name: "Event", fields: [eventId], references: [id], onDelete: Cascade)
}

model EventSource {
    id     String  @id @default(cuid())
    name   String
    events Event[]
}

model Event {
    id          String   @id @default(cuid())
    title       String
    description String   @db.Text
    date        DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    attendees User[]

    images Image[] @relation("Event")

    locationId String
    location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

    ownerId String?
    owner   User?   @relation(name: "Owner", fields: [ownerId], references: [id], onDelete: Cascade)

    sourceId String?
    source   EventSource? @relation(fields: [sourceId], references: [id], onDelete: Cascade)
}

model Location {
    id        String   @id @default(cuid())
    name      String?
    longitude Float
    latitude  Float
    address   Address?
    event     Event[]
    Invite    Invite[]
}

model Address {
    id         String   @id @default(cuid())
    country    String
    city       String?
    state      String?
    street     String?
    building   String?
    unit       String?
    zip        String?
    locationId String   @unique
    location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Message {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    text      String   @db.Text

    connectionId String
    connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade)

    fromUserId String
    fromUser   User   @relation("MessageSender", fields: [fromUserId], references: [id], onDelete: Cascade)

    toUserId String
    toUser   User   @relation("MessageReciever", fields: [toUserId], references: [id], onDelete: Cascade)
}

enum ImageRole {
    PROFILE
    EVENT
}

enum InviteStatus {
    PENDING
    ACCEPTED
    REJECTED
}
